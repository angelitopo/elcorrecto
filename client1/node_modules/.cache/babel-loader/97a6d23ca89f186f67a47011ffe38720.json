{"ast":null,"code":"import { startWaapiAnimation } from './index.mjs';\nimport { createGeneratorEasing } from '../../../easing/utils/create-generator-easing.mjs';\nimport { browserNumberValueTypes } from '../../../render/dom/value-types/number-browser.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { isGenerator } from '../../generators/utils/is-generator.mjs';\nimport { attachTimeline } from './utils/attach-timeline.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { setCSSVar, setStyle } from './utils/style.mjs';\nimport { supportsLinearEasing } from './utils/supports-linear-easing.mjs';\nimport { supportsPartialKeyframes } from './utils/supports-partial-keyframes.mjs';\nimport { supportsWaapi } from './utils/supports-waapi.mjs';\nconst state = new WeakMap();\nfunction hydrateKeyframes(valueName, keyframes, read) {\n  for (let i = 0; i < keyframes.length; i++) {\n    if (keyframes[i] === null) {\n      keyframes[i] = i === 0 ? read() : keyframes[i - 1];\n    }\n    if (typeof keyframes[i] === \"number\" && browserNumberValueTypes[valueName]) {\n      keyframes[i] = browserNumberValueTypes[valueName].transform(keyframes[i]);\n    }\n  }\n  if (!supportsPartialKeyframes() && keyframes.length < 2) {\n    keyframes.unshift(read());\n  }\n}\nconst defaultEasing = \"easeOut\";\nfunction getElementAnimationState(element) {\n  const animationState = state.get(element) || new Map();\n  state.set(element, animationState);\n  return state.get(element);\n}\nclass NativeAnimation {\n  constructor(element, valueName, valueKeyframes, options) {\n    const isCSSVar = valueName.startsWith(\"--\");\n    this.setValue = isCSSVar ? setCSSVar : setStyle;\n    this.options = options;\n    this.updateFinishedPromise();\n    invariant(typeof options.type !== \"string\", `animateMini doesn't support \"type\" as a string. Did you mean to import { spring } from \"framer-motion\"?`);\n    const existingAnimation = getElementAnimationState(element).get(valueName);\n    existingAnimation && existingAnimation.stop();\n    const readInitialKeyframe = () => {\n      return valueName.startsWith(\"--\") ? element.style.getPropertyValue(valueName) : window.getComputedStyle(element)[valueName];\n    };\n    if (!Array.isArray(valueKeyframes)) {\n      valueKeyframes = [valueKeyframes];\n    }\n    hydrateKeyframes(valueName, valueKeyframes, readInitialKeyframe);\n    if (isGenerator(options.type)) {\n      const generatorOptions = createGeneratorEasing(options, 100, options.type);\n      options.ease = supportsLinearEasing() ? generatorOptions.ease : defaultEasing;\n      options.duration = secondsToMilliseconds(generatorOptions.duration);\n      options.type = \"keyframes\";\n    } else {\n      options.ease = options.ease || defaultEasing;\n    }\n    this.removeAnimation = () => {\n      var _a;\n      return (_a = state.get(element)) === null || _a === void 0 ? void 0 : _a.delete(valueName);\n    };\n    const onFinish = () => {\n      this.setValue(element, valueName, getFinalKeyframe(valueKeyframes, this.options));\n      this.cancel();\n      this.resolveFinishedPromise();\n    };\n    if (!supportsWaapi()) {\n      onFinish();\n    } else {\n      this.animation = startWaapiAnimation(element, valueName, valueKeyframes, options);\n      if (options.autoplay === false) {\n        this.animation.pause();\n      }\n      this.animation.onfinish = onFinish;\n      if (this.pendingTimeline) {\n        attachTimeline(this.animation, this.pendingTimeline);\n      }\n      getElementAnimationState(element).set(valueName, this);\n    }\n  }\n  get duration() {\n    return millisecondsToSeconds(this.options.duration || 300);\n  }\n  get time() {\n    var _a;\n    if (this.animation) {\n      return millisecondsToSeconds(((_a = this.animation) === null || _a === void 0 ? void 0 : _a.currentTime) || 0);\n    }\n    return 0;\n  }\n  set time(newTime) {\n    if (this.animation) {\n      this.animation.currentTime = secondsToMilliseconds(newTime);\n    }\n  }\n  get speed() {\n    return this.animation ? this.animation.playbackRate : 1;\n  }\n  set speed(newSpeed) {\n    if (this.animation) {\n      this.animation.playbackRate = newSpeed;\n    }\n  }\n  get state() {\n    return this.animation ? this.animation.playState : \"finished\";\n  }\n  get startTime() {\n    return this.animation ? this.animation.startTime : null;\n  }\n  play() {\n    if (this.state === \"finished\") {\n      this.updateFinishedPromise();\n    }\n    this.animation && this.animation.play();\n  }\n  pause() {\n    this.animation && this.animation.pause();\n  }\n  stop() {\n    if (!this.animation || this.state === \"idle\" || this.state === \"finished\") {\n      return;\n    }\n    if (this.animation.commitStyles) {\n      this.animation.commitStyles();\n    }\n    this.cancel();\n  }\n  complete() {\n    this.animation && this.animation.finish();\n  }\n  cancel() {\n    this.removeAnimation();\n    try {\n      this.animation && this.animation.cancel();\n    } catch (e) {}\n  }\n  /**\n   * Allows the returned animation to be awaited or promise-chained. Currently\n   * resolves when the animation finishes at all but in a future update could/should\n   * reject if its cancels.\n   */\n  then(resolve, reject) {\n    return this.currentFinishedPromise.then(resolve, reject);\n  }\n  updateFinishedPromise() {\n    this.currentFinishedPromise = new Promise(resolve => {\n      this.resolveFinishedPromise = resolve;\n    });\n  }\n  attachTimeline(timeline) {\n    if (!this.animation) {\n      this.pendingTimeline = timeline;\n    } else {\n      attachTimeline(this.animation, timeline);\n    }\n    return noop;\n  }\n}\nexport { NativeAnimation };","map":null,"metadata":{},"sourceType":"module"}